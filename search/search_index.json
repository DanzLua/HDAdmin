{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HD Admin Docs \u00b6 Coming soon","title":"Test"},{"location":"#welcome-to-hd-admin-docs","text":"Coming soon","title":"Welcome to HD Admin Docs"},{"location":"about/","text":"Coming soon \u00b6 Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Modules"},{"location":"about/#coming-soon","text":"Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Coming soon"},{"location":"projects/datastoreplus/about/","text":"DataStore+ \u00b6","title":"About"},{"location":"projects/datastoreplus/about/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/user/","text":"DataStore+ \u00b6","title":"User"},{"location":"projects/datastoreplus/user/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/userservice/","text":"DataStore+ \u00b6","title":"UserService"},{"location":"projects/datastoreplus/userservice/#datastore","text":"","title":"DataStore+"},{"location":"projects/tableplus/about/","text":"Table+ \u00b6","title":"About"},{"location":"projects/tableplus/about/#table","text":"","title":"Table+"},{"location":"projects/tableplus/table/","text":"Table+ \u00b6","title":"Table"},{"location":"projects/tableplus/table/#table","text":"","title":"Table+"},{"location":"projects/topbarplus/about/","text":"Topbar+ is a lightweight application that expands upon Roblox's topbar to give you greater control and customisability. Create additional icons and themes with ease; utilise a once underused space. Resources \u00b6 MainModule Playground Thread: Coming soon Collaborate \u00b6 Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository . Example \u00b6 In a server script: require ( 4874365424 ) -- Initiate Topbar+ In a local script: -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create our shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . Position = UDim2 . new ( 0 , 170 , 255 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an Icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification Themes \u00b6 Themes are easily adaptable tables of information that can be applied to Icons to ehance their appearance and behaviour. For details on setting up a theme, visit the Icon docs. A theme can be applied by simply doing: Icon : setTheme ( theme ) Here's some examples of custom themes you can create: Roblox-mimic local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, } Soft blue local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.3 , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageTransparency = 1 , }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, } Rainbow pop local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end","title":"About"},{"location":"projects/topbarplus/about/#resources","text":"MainModule Playground Thread: Coming soon","title":"Resources"},{"location":"projects/topbarplus/about/#collaborate","text":"Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository .","title":"Collaborate"},{"location":"projects/topbarplus/about/#example","text":"In a server script: require ( 4874365424 ) -- Initiate Topbar+ In a local script: -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create our shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . Position = UDim2 . new ( 0 , 170 , 255 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an Icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification","title":"Example"},{"location":"projects/topbarplus/about/#themes","text":"Themes are easily adaptable tables of information that can be applied to Icons to ehance their appearance and behaviour. For details on setting up a theme, visit the Icon docs. A theme can be applied by simply doing: Icon : setTheme ( theme ) Here's some examples of custom themes you can create: Roblox-mimic local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, } Soft blue local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.3 , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageTransparency = 1 , }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, } Rainbow pop local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end","title":"Themes"},{"location":"projects/topbarplus/icon/","text":"Properties \u00b6 objects \u00b6 Icon . objects A dictionary of Instances that make up the Icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text. theme \u00b6 (read only) Icon . theme A dictionary describing the Icons theme. Set using the Icon:setTheme() method. Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, } toggleStatus \u00b6 (read only) Icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". Set using the Icon:select() and Icon:deselect() methods. name \u00b6 (read only) Icon . name The Icon creation name. imageId \u00b6 (read only) Icon . imageId The Icons imageId. Set using the Icon:setImage() method. imageScale \u00b6 (read only) Icon . imageScale The scale of the Icon image. A value between 0 and 1. Set using the Icon:setImageScale() method. order \u00b6 (read only) Icon . order The Icons order. This determines whether the Icon comes before or after other Icons. Set using the Icon:setOrder() method. enabled \u00b6 (read only) Icon . order A bool describing whether the icon is enabled or not. Set using the Icon:setEnabled() method. totalNotifications \u00b6 (read only) Icon . totalNotifications An integer representing the amount of active notifications. toggleFunction \u00b6 (read only) Icon . toggleFunction A custom function called during Icon:select() and Icon:deselect() . Set using the Icon:setToggleFunction() method. deselectWhenOtherIconSelected \u00b6 Icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected. Events \u00b6 updated \u00b6 Icon . updated Fired when the Icon causes a position shift of other icons. Icon . updated : Connect ( function ()) end ) selected \u00b6 Icon . selected Fired when the Icon is selected. Icon . selected : Connect ( function ()) end ) deselected \u00b6 Icon . deselected Fired when the Icon is deselected. Icon . deselected : Connect ( function ()) end ) endNotifications \u00b6 Icon . endNotifications Fired when the Icons notifcations are cleared. Icon . endNotifications : Connect ( function ()) end ) Methods \u00b6 setImage \u00b6 Icon : setImage ( imageId ) Sets the icons image. setOrder \u00b6 Icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons. setImageScale \u00b6 Icon : setImageScale ( scale ) Sets the scale of the image based on a value between 0 and 1. setEnabled \u00b6 Icon : setEnabled ( bool ) Sets the Icons visibility. setToggleFunction \u00b6 Icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the Icon is selected and deslected. setTheme \u00b6 Icon : setTheme ( themeDetails ) Applies the specified theme to the Icon. See Icon.theme for details on creating a theme. select \u00b6 Icon : select () Selects the Icon. deselect \u00b6 Icon : deselect () Deselects the Icon. notify \u00b6 Icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the Icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to Icon.deselected . clearNotifications \u00b6 Icon : clearNotifications () Clears the Icons notifications. destroy \u00b6 Icon : destroy () Destroys all objects and events associcated with the Icon.","title":"Icon"},{"location":"projects/topbarplus/icon/#properties","text":"","title":"Properties"},{"location":"projects/topbarplus/icon/#objects","text":"Icon . objects A dictionary of Instances that make up the Icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text.","title":"objects"},{"location":"projects/topbarplus/icon/#theme","text":"(read only) Icon . theme A dictionary describing the Icons theme. Set using the Icon:setTheme() method. Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, }","title":"theme"},{"location":"projects/topbarplus/icon/#togglestatus","text":"(read only) Icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". Set using the Icon:select() and Icon:deselect() methods.","title":"toggleStatus"},{"location":"projects/topbarplus/icon/#name","text":"(read only) Icon . name The Icon creation name.","title":"name"},{"location":"projects/topbarplus/icon/#imageid","text":"(read only) Icon . imageId The Icons imageId. Set using the Icon:setImage() method.","title":"imageId"},{"location":"projects/topbarplus/icon/#imagescale","text":"(read only) Icon . imageScale The scale of the Icon image. A value between 0 and 1. Set using the Icon:setImageScale() method.","title":"imageScale"},{"location":"projects/topbarplus/icon/#order","text":"(read only) Icon . order The Icons order. This determines whether the Icon comes before or after other Icons. Set using the Icon:setOrder() method.","title":"order"},{"location":"projects/topbarplus/icon/#enabled","text":"(read only) Icon . order A bool describing whether the icon is enabled or not. Set using the Icon:setEnabled() method.","title":"enabled"},{"location":"projects/topbarplus/icon/#totalnotifications","text":"(read only) Icon . totalNotifications An integer representing the amount of active notifications.","title":"totalNotifications"},{"location":"projects/topbarplus/icon/#togglefunction","text":"(read only) Icon . toggleFunction A custom function called during Icon:select() and Icon:deselect() . Set using the Icon:setToggleFunction() method.","title":"toggleFunction"},{"location":"projects/topbarplus/icon/#deselectwhenothericonselected","text":"Icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected.","title":"deselectWhenOtherIconSelected"},{"location":"projects/topbarplus/icon/#events","text":"","title":"Events"},{"location":"projects/topbarplus/icon/#updated","text":"Icon . updated Fired when the Icon causes a position shift of other icons. Icon . updated : Connect ( function ()) end )","title":"updated"},{"location":"projects/topbarplus/icon/#selected","text":"Icon . selected Fired when the Icon is selected. Icon . selected : Connect ( function ()) end )","title":"selected"},{"location":"projects/topbarplus/icon/#deselected","text":"Icon . deselected Fired when the Icon is deselected. Icon . deselected : Connect ( function ()) end )","title":"deselected"},{"location":"projects/topbarplus/icon/#endnotifications","text":"Icon . endNotifications Fired when the Icons notifcations are cleared. Icon . endNotifications : Connect ( function ()) end )","title":"endNotifications"},{"location":"projects/topbarplus/icon/#methods","text":"","title":"Methods"},{"location":"projects/topbarplus/icon/#setimage","text":"Icon : setImage ( imageId ) Sets the icons image.","title":"setImage"},{"location":"projects/topbarplus/icon/#setorder","text":"Icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons.","title":"setOrder"},{"location":"projects/topbarplus/icon/#setimagescale","text":"Icon : setImageScale ( scale ) Sets the scale of the image based on a value between 0 and 1.","title":"setImageScale"},{"location":"projects/topbarplus/icon/#setenabled","text":"Icon : setEnabled ( bool ) Sets the Icons visibility.","title":"setEnabled"},{"location":"projects/topbarplus/icon/#settogglefunction","text":"Icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the Icon is selected and deslected.","title":"setToggleFunction"},{"location":"projects/topbarplus/icon/#settheme","text":"Icon : setTheme ( themeDetails ) Applies the specified theme to the Icon. See Icon.theme for details on creating a theme.","title":"setTheme"},{"location":"projects/topbarplus/icon/#select","text":"Icon : select () Selects the Icon.","title":"select"},{"location":"projects/topbarplus/icon/#deselect","text":"Icon : deselect () Deselects the Icon.","title":"deselect"},{"location":"projects/topbarplus/icon/#notify","text":"Icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the Icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to Icon.deselected .","title":"notify"},{"location":"projects/topbarplus/icon/#clearnotifications","text":"Icon : clearNotifications () Clears the Icons notifications.","title":"clearNotifications"},{"location":"projects/topbarplus/icon/#destroy","text":"Icon : destroy () Destroys all objects and events associcated with the Icon.","title":"destroy"},{"location":"projects/topbarplus/iconcontroller/","text":"Functions \u00b6 createIcon \u00b6 IconController : createIcon ( name , imageId , order ) Creates, stores and returns an Icon. getIcon \u00b6 IconController : getIcon ( name ) Returns an Icon of the corresponding name. getAllIcons \u00b6 IconController : getAllIcons () Returns an array containing every Icon. removeIcon \u00b6 IconController : removeIcon ( name ) Destroys and removes references of the corresponding Icon.","title":"IconController"},{"location":"projects/topbarplus/iconcontroller/#functions","text":"","title":"Functions"},{"location":"projects/topbarplus/iconcontroller/#createicon","text":"IconController : createIcon ( name , imageId , order ) Creates, stores and returns an Icon.","title":"createIcon"},{"location":"projects/topbarplus/iconcontroller/#geticon","text":"IconController : getIcon ( name ) Returns an Icon of the corresponding name.","title":"getIcon"},{"location":"projects/topbarplus/iconcontroller/#getallicons","text":"IconController : getAllIcons () Returns an array containing every Icon.","title":"getAllIcons"},{"location":"projects/topbarplus/iconcontroller/#removeicon","text":"IconController : removeIcon ( name ) Destroys and removes references of the corresponding Icon.","title":"removeIcon"},{"location":"projects/zoneplus/about/","text":"Topbar+ \u00b6","title":"About"},{"location":"projects/zoneplus/about/#topbar","text":"","title":"Topbar+"},{"location":"projects/zoneplus/zone/","text":"Topbar+ \u00b6","title":"Zone"},{"location":"projects/zoneplus/zone/#topbar","text":"","title":"Topbar+"},{"location":"projects/zoneplus/zoneservice/","text":"Topbar+ \u00b6","title":"ZoneService"},{"location":"projects/zoneplus/zoneservice/#topbar","text":"","title":"Topbar+"}]}