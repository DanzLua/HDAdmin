{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HD Admin Docs \u00b6 Coming soon","title":"Test"},{"location":"#welcome-to-hd-admin-docs","text":"Coming soon","title":"Welcome to HD Admin Docs"},{"location":"about/","text":"Coming soon \u00b6 Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Modules"},{"location":"about/#coming-soon","text":"Click to expand This is an expandable message Warning This is a warning Info This is an Info box","title":"Coming soon"},{"location":"projects/datastoreplus/about/","text":"DataStore+ \u00b6 Coming soon","title":"About"},{"location":"projects/datastoreplus/about/#datastore","text":"Coming soon","title":"DataStore+"},{"location":"projects/datastoreplus/tablemodifiers/","text":"DataStore+ \u00b6","title":"TableModifiers"},{"location":"projects/datastoreplus/tablemodifiers/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/user/","text":"DataStore+ \u00b6","title":"User"},{"location":"projects/datastoreplus/user/#datastore","text":"","title":"DataStore+"},{"location":"projects/datastoreplus/userservice/","text":"DataStore+ \u00b6","title":"UserService"},{"location":"projects/datastoreplus/userservice/#datastore","text":"","title":"DataStore+"},{"location":"projects/topbarplus/about/","text":"Topbar+ is a lightweight application that expands upon Roblox's topbar to give you greater control and customisability. Create additional icons and themes with ease; utilise a once underused space. Resources \u00b6 Repository MainModule Playground Thread: Coming soon Collaborate \u00b6 Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository . Referencing \u00b6 After requiring the MainModule, Topbar+ modules can be referenced on the client under the HDAdmin directory in ReplicatedStorage. Location Pathway Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Topbar+\") Example \u00b6 In a server script: require ( 4874365424 ) -- Initiate Topbar+ In a local script: -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create a shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . Position = UDim2 . new ( 0 , 170 , 255 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an Icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification Themes \u00b6 Themes are easily adaptable tables of information that can be applied to Icons to ehance their appearance and behaviour. For details on setting up a theme, visit the Icon docs. A theme can be applied by simply doing: Icon : setTheme ( theme ) Here's some examples of custom themes you can create: Roblox-mimic local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, } Soft blue local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.3 , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageTransparency = 1 , }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, } Rainbow pop local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end","title":"About"},{"location":"projects/topbarplus/about/#resources","text":"Repository MainModule Playground Thread: Coming soon","title":"Resources"},{"location":"projects/topbarplus/about/#collaborate","text":"Topbar+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository .","title":"Collaborate"},{"location":"projects/topbarplus/about/#referencing","text":"After requiring the MainModule, Topbar+ modules can be referenced on the client under the HDAdmin directory in ReplicatedStorage. Location Pathway Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Topbar+\")","title":"Referencing"},{"location":"projects/topbarplus/about/#example","text":"In a server script: require ( 4874365424 ) -- Initiate Topbar+ In a local script: -- Require the IconController local replicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local topbarPlus = replicatedStorage : WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Topbar+\" ) local iconController = require ( topbarPlus . IconController ) -- Create a shop menu local player = game . Players . LocalPlayer local gui = Instance . new ( \"ScreenGui\" ) local shop = Instance . new ( \"Frame\" ) shop . BackgroundColor3 = Color3 . fromRGB ( 200 , 66 , 0 ) shop . BackgroundTransparency = 0.1 shop . BorderSizePixel = 0 shop . Name = \"Shop\" shop . Position = UDim2 . new ( 0 , 170 , 255 ) shop . Size = UDim2 . new ( 0.25 , 0 , 0.6 , 0 ) shop . Visible = false shop . Parent = gui gui . Parent = player . PlayerGui -- Create an Icon called 'Shop', with image '4882429582' and order of 1 local shopIcon = iconController : createIcon ( \"Shop\" , 4882429582 , 1 ) shopIcon : setToggleMenu ( gui . Shop ) -- Set the shop menu to be toggled by the icon shopIcon : notify () -- Prompt a notification","title":"Example"},{"location":"projects/topbarplus/about/#themes","text":"Themes are easily adaptable tables of information that can be applied to Icons to ehance their appearance and behaviour. For details on setting up a theme, visit the Icon docs. A theme can be applied by simply doing: Icon : setTheme ( theme ) Here's some examples of custom themes you can create: Roblox-mimic local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, } Soft blue local theme = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.35 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"button\" ] = { selected = { ImageTransparency = 0.3 , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { ImageTransparency = 1 , }, }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, }, [ \"amount\" ] = { selected = { TextColor3 = Color3 . fromRGB ( 0 , 170 , 255 ), }, deselected = { TextColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, }, } Rainbow pop local function getTheme ( primaryColor ) local secondaryColor = Color3 . fromRGB ( 255 , 255 , 255 ) return { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0.15 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {} }, [ \"button\" ] = { selected = { Position = UDim2 . new ( - 0.1 , 0 , - 0.1 , 0 ), Size = UDim2 . new ( 1.2 , 0 , 1.2 , 0 ), ImageColor3 = primaryColor , }, deselected = { Position = UDim2 . new ( 0 , 0 , 0 , 0 ), Size = UDim2 . new ( 1 , 0 , 1 , 0 ), }, }, [ \"image\" ] = { selected = { ImageColor3 = secondaryColor }, deselected = { ImageColor3 = secondaryColor }, }, [ \"notification\" ] = { selected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = secondaryColor }, deselected = { Image = \"http://www.roblox.com/asset/?id=4882430005\" , ImageColor3 = primaryColor , }, }, [ \"amount\" ] = { selected = { TextColor3 = primaryColor , }, deselected = { TextColor3 = secondaryColor }, }, } end","title":"Themes"},{"location":"projects/topbarplus/icon/","text":"Properties \u00b6 objects \u00b6 Icon . objects A dictionary of Instances that make up the Icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text. theme \u00b6 (read only) Icon . theme A dictionary describing the Icons theme. Set using the Icon:setTheme() method. Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, } toggleStatus \u00b6 (read only) Icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". Set using the Icon:select() and Icon:deselect() methods. name \u00b6 (read only) Icon . name The Icon creation name. imageId \u00b6 (read only) Icon . imageId The Icons imageId. Set using the Icon:setImage() method. imageScale \u00b6 (read only) Icon . imageScale The scale of the Icon image. A value between 0 and 1. Set using the Icon:setImageScale() method. order \u00b6 (read only) Icon . order The Icons order. This determines whether the Icon comes before or after other Icons. Set using the Icon:setOrder() method. enabled \u00b6 (read only) Icon . order A bool describing whether the icon is enabled or not. Set using the Icon:setEnabled() method. totalNotifications \u00b6 (read only) Icon . totalNotifications An integer representing the amount of active notifications. toggleFunction \u00b6 (read only) Icon . toggleFunction A custom function called during Icon:select() and Icon:deselect() . Set using the Icon:setToggleFunction() method. deselectWhenOtherIconSelected \u00b6 Icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected. Events \u00b6 updated \u00b6 Icon . updated Fired when the Icon causes a position shift of other icons. Icon . updated : Connect ( function ()) end ) selected \u00b6 Icon . selected Fired when the Icon is selected. Icon . selected : Connect ( function ()) end ) deselected \u00b6 Icon . deselected Fired when the Icon is deselected. Icon . deselected : Connect ( function ()) end ) endNotifications \u00b6 Icon . endNotifications Fired when the Icons notifcations are cleared. Icon . endNotifications : Connect ( function ()) end ) Methods \u00b6 setImage \u00b6 Icon : setImage ( imageId ) Sets the icons image. setOrder \u00b6 Icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons. setImageScale \u00b6 Icon : setImageScale ( scale ) Sets the scale of the image based on a value between 0 and 1. setEnabled \u00b6 Icon : setEnabled ( bool ) Sets the Icons visibility. setToggleFunction \u00b6 Icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the Icon is selected and deslected. setTheme \u00b6 Icon : setTheme ( themeDetails ) Applies the specified theme to the Icon. See Icon.theme for details on creating a theme. select \u00b6 Icon : select () Selects the Icon. deselect \u00b6 Icon : deselect () Deselects the Icon. notify \u00b6 Icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the Icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to Icon.deselected . clearNotifications \u00b6 Icon : clearNotifications () Clears the Icons notifications. destroy \u00b6 Icon : destroy () Destroys all objects and events associcated with the Icon.","title":"Icon"},{"location":"projects/topbarplus/icon/#properties","text":"","title":"Properties"},{"location":"projects/topbarplus/icon/#objects","text":"Icon . objects A dictionary of Instances that make up the Icon. Key Value Desc container Frame The icon container. button ImageButton The icon background. image ImageLabel The icon image. notification ImageLabel The notification container and background. amount TextLabel The notification amount text.","title":"objects"},{"location":"projects/topbarplus/icon/#theme","text":"(read only) Icon . theme A dictionary describing the Icons theme. Set using the Icon:setTheme() method. Key Value Desc toggleTweenInfo TweenInfo How object properties transition when toggled. container ToggleDetails (See below) button ToggleDetails (See below) image ToggleDetails (See below) notification ToggleDetails (See below) amount ToggleDetails (See below) ToggleDetails A dictionary containing the objects toggle-state properties. Key Value Desc selected PropertyDetails (See below) deselected PropertyDetails (See below) PropertyDetails A dictionary containing the objects properties for that particular toggle-state. Key Value [propertyName] [propertyValue] ... ... Default theme example: defaultThemeDetails = { -- TOGGLE EFFECT [ \"toggleTweenInfo\" ] = TweenInfo . new ( 0 , Enum . EasingStyle . Quad , Enum . EasingDirection . Out ), -- OBJECT PROPERTIES [ \"container\" ] = { selected = {}, deselected = {}, }, [ \"button\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 31 , 33 , 35 ), } }, [ \"image\" ] = { selected = { ImageColor3 = Color3 . fromRGB ( 57 , 60 , 65 ), }, deselected = { ImageColor3 = Color3 . fromRGB ( 255 , 255 , 255 ), } }, [ \"notification\" ] = { selected = {}, deselected = {}, }, [ \"amount\" ] = { selected = {}, deselected = {}, }, }","title":"theme"},{"location":"projects/topbarplus/icon/#togglestatus","text":"(read only) Icon . toggleStatus A string describing the toggle status: \"selected\" or \"deselected\". Set using the Icon:select() and Icon:deselect() methods.","title":"toggleStatus"},{"location":"projects/topbarplus/icon/#name","text":"(read only) Icon . name The Icon creation name.","title":"name"},{"location":"projects/topbarplus/icon/#imageid","text":"(read only) Icon . imageId The Icons imageId. Set using the Icon:setImage() method.","title":"imageId"},{"location":"projects/topbarplus/icon/#imagescale","text":"(read only) Icon . imageScale The scale of the Icon image. A value between 0 and 1. Set using the Icon:setImageScale() method.","title":"imageScale"},{"location":"projects/topbarplus/icon/#order","text":"(read only) Icon . order The Icons order. This determines whether the Icon comes before or after other Icons. Set using the Icon:setOrder() method.","title":"order"},{"location":"projects/topbarplus/icon/#enabled","text":"(read only) Icon . order A bool describing whether the icon is enabled or not. Set using the Icon:setEnabled() method.","title":"enabled"},{"location":"projects/topbarplus/icon/#totalnotifications","text":"(read only) Icon . totalNotifications An integer representing the amount of active notifications.","title":"totalNotifications"},{"location":"projects/topbarplus/icon/#togglefunction","text":"(read only) Icon . toggleFunction A custom function called during Icon:select() and Icon:deselect() . Set using the Icon:setToggleFunction() method.","title":"toggleFunction"},{"location":"projects/topbarplus/icon/#deselectwhenothericonselected","text":"Icon . toggleFunction A bool deciding whether the icon will be deselected when another icon is selected.","title":"deselectWhenOtherIconSelected"},{"location":"projects/topbarplus/icon/#events","text":"","title":"Events"},{"location":"projects/topbarplus/icon/#updated","text":"Icon . updated Fired when the Icon causes a position shift of other icons. Icon . updated : Connect ( function ()) end )","title":"updated"},{"location":"projects/topbarplus/icon/#selected","text":"Icon . selected Fired when the Icon is selected. Icon . selected : Connect ( function ()) end )","title":"selected"},{"location":"projects/topbarplus/icon/#deselected","text":"Icon . deselected Fired when the Icon is deselected. Icon . deselected : Connect ( function ()) end )","title":"deselected"},{"location":"projects/topbarplus/icon/#endnotifications","text":"Icon . endNotifications Fired when the Icons notifcations are cleared. Icon . endNotifications : Connect ( function ()) end )","title":"endNotifications"},{"location":"projects/topbarplus/icon/#methods","text":"","title":"Methods"},{"location":"projects/topbarplus/icon/#setimage","text":"Icon : setImage ( imageId ) Sets the icons image.","title":"setImage"},{"location":"projects/topbarplus/icon/#setorder","text":"Icon : setOrder ( order ) Sets the icons priority order, determining whether it will appear before or after other icons.","title":"setOrder"},{"location":"projects/topbarplus/icon/#setimagescale","text":"Icon : setImageScale ( scale ) Sets the scale of the image based on a value between 0 and 1.","title":"setImageScale"},{"location":"projects/topbarplus/icon/#setenabled","text":"Icon : setEnabled ( bool ) Sets the Icons visibility.","title":"setEnabled"},{"location":"projects/topbarplus/icon/#settogglefunction","text":"Icon : setToggleFunction ( toggleFunction ) Sets a function that is called every time the Icon is selected and deslected.","title":"setToggleFunction"},{"location":"projects/topbarplus/icon/#settheme","text":"Icon : setTheme ( themeDetails ) Applies the specified theme to the Icon. See Icon.theme for details on creating a theme.","title":"setTheme"},{"location":"projects/topbarplus/icon/#select","text":"Icon : select () Selects the Icon.","title":"select"},{"location":"projects/topbarplus/icon/#deselect","text":"Icon : deselect () Deselects the Icon.","title":"deselect"},{"location":"projects/topbarplus/icon/#notify","text":"Icon : notify ( clearNoticeEvent ) Prompts a notification that appears in the top-right corner of the Icon. Specifiy clearNoticeEvent with an event to determine when to end the notifcation. If not specified, clearNoticeEvent defaults to Icon.deselected .","title":"notify"},{"location":"projects/topbarplus/icon/#clearnotifications","text":"Icon : clearNotifications () Clears the Icons notifications.","title":"clearNotifications"},{"location":"projects/topbarplus/icon/#destroy","text":"Icon : destroy () Destroys all objects and events associcated with the Icon.","title":"destroy"},{"location":"projects/topbarplus/iconcontroller/","text":"API \u00b6 createIcon \u00b6 IconController : createIcon ( name , imageId , order ) Creates, stores and returns an icon. getIcon \u00b6 IconController : getIcon ( name ) Returns an icon of the corresponding name. getAllIcons \u00b6 IconController : getAllIcons () Returns an array containing every icon. removeIcon \u00b6 IconController : removeIcon ( name ) Destroys and removes references of the corresponding icon.","title":"IconController"},{"location":"projects/topbarplus/iconcontroller/#api","text":"","title":"API"},{"location":"projects/topbarplus/iconcontroller/#createicon","text":"IconController : createIcon ( name , imageId , order ) Creates, stores and returns an icon.","title":"createIcon"},{"location":"projects/topbarplus/iconcontroller/#geticon","text":"IconController : getIcon ( name ) Returns an icon of the corresponding name.","title":"getIcon"},{"location":"projects/topbarplus/iconcontroller/#getallicons","text":"IconController : getAllIcons () Returns an array containing every icon.","title":"getAllIcons"},{"location":"projects/topbarplus/iconcontroller/#removeicon","text":"IconController : removeIcon ( name ) Destroys and removes references of the corresponding icon.","title":"removeIcon"},{"location":"projects/zoneplus/about/","text":"Zone+ is a lightweight application that utilises regions and raycasting to efficiently determine players within an area. Resources \u00b6 Repository MainModule Playground Thread Collaborate \u00b6 Zone+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository . Referencing \u00b6 After requiring the MainModule, Zone+ modules can be referenced on the server and client under the HDAdmin directory in ReplicatedStorage. Location Pathway Server MainModule or ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Example (server-sided) \u00b6 On the server: local ZonePlus = require ( 4664437268 ) -- Initiate Zone+ local ZoneService = require ( ZonePlus . ZoneService ) -- Retrieve and require ZoneService local group = workspace . YourGroupHere -- A container (i.e. Model or Folder) of parts that represent the zone local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) -- Construct a zone called 'ZoneName' using 'group' and with an extended height of 15 local playersInZone = zone : getPlayers () -- Retrieves an array of players within the zone Example (client-sided) \u00b6 Zone+ is primarily intended for server-sided use, however also supports client use. On the server: require ( 4664437268 ) -- Initiate Zone+ On the client: local ZoneService = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Zone+\" ). ZoneService ) local group = workspace . YourGroupHere local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) local playersInZone = zone : getPlayers () Uses \u00b6 Safe Zone (using additionalHeight, a loop and 2000 randomly generated parts) -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Setup zone local group = workspace . SafeZone1 local zone = ZoneService : createZone ( \"SafeZone1\" , group , 15 ) -- Generate 2000 random parts within zone - not necessary, it just looks cool :) for i = 1 , 2000 do local randomCFrame = zone : getRandomPoint () local part = Instance . new ( \"Part\" ) part . Anchored = true part . CanCollide = false part . Transparency = 0.5 part . Size = Vector3 . new ( 1 , 1 , 1 ) part . Color = Color3 . fromRGB ( 0 , 255 , 255 ) part . CFrame = randomCFrame part . Parent = workspace end -- Create a safe zone by checking for players within the zone every X seconds local players = game : GetService ( \"Players\" ) local safeZoneCheckInterval = 0.2 local forceFieldName = \"PineappleDoesNotGoOnPizza\" local forceFieldTemplate = Instance . new ( \"ForceField\" ) forceFieldTemplate . Name = forceFieldName while true do wait ( safeZoneCheckInterval ) -- Get players in zone local playersInZone = zone : getPlayers () local playersInZoneDictionary = {} for _ , plr in pairs ( playersInZone ) do playersInZoneDictionary [ plr ] = true end -- Add/remove forcefield accordingly for _ , plr in pairs ( players : GetPlayers ()) do local char = plr . Character local forceField = char and char : FindFirstChild ( forceFieldName ) if playersInZoneDictionary [ plr ] then if not forceField then forceField = forceFieldTemplate : Clone () forceField . Parent = char end elseif forceField then forceField : Destroy () end end end Safe Zone (using uncancollided parts and zone events) -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Setup zone local group = workspace . SafeZone2 local zone = ZoneService : createZone ( \"SafeZone2\" , group , 0 ) -- Create a safe zone by listening for players entering and leaving the zone local safeZoneCheckInterval = 0.2 local forceFieldName = \"PineapplesForLife\" local forceFieldTemplate = Instance . new ( \"ForceField\" ) forceFieldTemplate . Name = forceFieldName local connectionAdded = zone . playerAdded : Connect ( function ( player ) local char = player . Character local forceField = char and char : FindFirstChild ( forceFieldName ) if not forceField then forceField = forceFieldTemplate : Clone () forceField . Parent = char end end ) local connectionRemoving = zone . playerRemoving : Connect ( function ( player ) local char = player . Character local forceField = char and char : FindFirstChild ( forceFieldName ) if forceField then forceField : Destroy () end end ) zone : initLoop ( safeZoneCheckInterval ) Coin Spawner -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Setup zone local group = workspace . CoinSpawner local zone = ZoneService : createZone ( \"CoinSpawner\" , group , 15 ) -- Spawn coins within a random position in the zone, and position equal distances above the ground local distanceAboveGround = 4 local totalCoins = 40 local coinTemplate = Instance . new ( \"Part\" ) coinTemplate . Name = \"Coin\" coinTemplate . Anchored = true coinTemplate . CanCollide = false coinTemplate . Transparency = 0 coinTemplate . Size = Vector3 . new ( 1 , 4 , 4 ) coinTemplate . Color = Color3 . fromRGB ( 255 , 176 , 0 ) coinTemplate . Reflectance = 0.3 coinTemplate . Shape = Enum . PartType . Cylinder coinTemplate . Parent = nil local function spawnCoin () local randomCFrame , hitPart , hitIntersection = zone : getRandomPoint () local coin = coinTemplate : Clone () coin . CFrame = CFrame . new ( hitIntersection + Vector3 . new ( 0 , distanceAboveGround , 0 )) coin . Touched : Connect ( function () spawnCoin () coin : Destroy () end ) coin . Parent = workspace end for i = 1 , totalCoins do spawnCoin () end Voting Pads -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Config local voteTime = 10 -- Vote local votePads = workspace . VotingPads local voteMachine = workspace . VoteMachine9000 local container = voteMachine . SurfaceGui . Container local votes = container . Votes local status = container . Status local function beginVote () -- Setup voting zones local zones = {} for _ , group in pairs ( votePads : GetChildren ()) do local zoneName = group . Name local frame = votes [ zoneName ] local zone = ZoneService : createZone ( zoneName , group , 15 ) local function updateVote ( increment ) zone . votes = zone . votes + increment frame . TextLabel . Text = zone . votes end zone . votes = 0 zone . playerAdded : Connect ( function ( player ) updateVote ( 1 ) end ) zone . playerRemoving : Connect ( function ( player ) updateVote ( - 1 ) end ) zone : initLoop ( 0.1 ) updateVote ( 0 ) frame . Visible = true table.insert ( zones , zone ) end -- Countdown for i = 1 , voteTime do status . Text = ( \"Vote! (%s)\" ): format ( voteTime + 1 - i ) wait ( 1 ) end -- Determine winner local winners = {} local winningScore = 0 for _ , zone in pairs ( zones ) do local score = zone . votes if score > winningScore then winningScore = score end end for _ , zone in pairs ( zones ) do local score = zone . votes local frame = votes [ zone . name ] if score == winningScore then frame . Visible = true table.insert ( winners , zone ) else frame . Visible = false end ZoneService : removeZone ( zone . name ) end -- Display results if winningScore == 0 then status . Text = \"No votes were made.\" elseif # winners > 1 then status . Text = \"It's a tie!\" else status . Text = ( \"The winner is %s!\" ): format ( winners [ 1 ]. name ) end wait ( 3 ) -- Hide frames and restart status . Text = \"Beginning new round...\" for _ , frame in pairs ( votes : GetChildren ()) do frame . Visible = false end wait ( 1 ) end while true do beginVote () wait ( 1 ) end","title":"About"},{"location":"projects/zoneplus/about/#resources","text":"Repository MainModule Playground Thread","title":"Resources"},{"location":"projects/zoneplus/about/#collaborate","text":"Zone+ is an open-source project; all contributions are much appreciated. You're welcome to report bugs, suggest features and make pull requests at our repository .","title":"Collaborate"},{"location":"projects/zoneplus/about/#referencing","text":"After requiring the MainModule, Zone+ modules can be referenced on the server and client under the HDAdmin directory in ReplicatedStorage. Location Pathway Server MainModule or ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\") Client ReplicatedStorage:WaitForChild(\"HDAdmin\"):WaitForChild(\"Zone+\")","title":"Referencing"},{"location":"projects/zoneplus/about/#example-server-sided","text":"On the server: local ZonePlus = require ( 4664437268 ) -- Initiate Zone+ local ZoneService = require ( ZonePlus . ZoneService ) -- Retrieve and require ZoneService local group = workspace . YourGroupHere -- A container (i.e. Model or Folder) of parts that represent the zone local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) -- Construct a zone called 'ZoneName' using 'group' and with an extended height of 15 local playersInZone = zone : getPlayers () -- Retrieves an array of players within the zone","title":"Example (server-sided)"},{"location":"projects/zoneplus/about/#example-client-sided","text":"Zone+ is primarily intended for server-sided use, however also supports client use. On the server: require ( 4664437268 ) -- Initiate Zone+ On the client: local ZoneService = require ( game : GetService ( \"ReplicatedStorage\" ): WaitForChild ( \"HDAdmin\" ): WaitForChild ( \"Zone+\" ). ZoneService ) local group = workspace . YourGroupHere local zone = ZoneService : createZone ( \"ZoneName\" , group , 15 ) local playersInZone = zone : getPlayers ()","title":"Example (client-sided)"},{"location":"projects/zoneplus/about/#uses","text":"Safe Zone (using additionalHeight, a loop and 2000 randomly generated parts) -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Setup zone local group = workspace . SafeZone1 local zone = ZoneService : createZone ( \"SafeZone1\" , group , 15 ) -- Generate 2000 random parts within zone - not necessary, it just looks cool :) for i = 1 , 2000 do local randomCFrame = zone : getRandomPoint () local part = Instance . new ( \"Part\" ) part . Anchored = true part . CanCollide = false part . Transparency = 0.5 part . Size = Vector3 . new ( 1 , 1 , 1 ) part . Color = Color3 . fromRGB ( 0 , 255 , 255 ) part . CFrame = randomCFrame part . Parent = workspace end -- Create a safe zone by checking for players within the zone every X seconds local players = game : GetService ( \"Players\" ) local safeZoneCheckInterval = 0.2 local forceFieldName = \"PineappleDoesNotGoOnPizza\" local forceFieldTemplate = Instance . new ( \"ForceField\" ) forceFieldTemplate . Name = forceFieldName while true do wait ( safeZoneCheckInterval ) -- Get players in zone local playersInZone = zone : getPlayers () local playersInZoneDictionary = {} for _ , plr in pairs ( playersInZone ) do playersInZoneDictionary [ plr ] = true end -- Add/remove forcefield accordingly for _ , plr in pairs ( players : GetPlayers ()) do local char = plr . Character local forceField = char and char : FindFirstChild ( forceFieldName ) if playersInZoneDictionary [ plr ] then if not forceField then forceField = forceFieldTemplate : Clone () forceField . Parent = char end elseif forceField then forceField : Destroy () end end end Safe Zone (using uncancollided parts and zone events) -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Setup zone local group = workspace . SafeZone2 local zone = ZoneService : createZone ( \"SafeZone2\" , group , 0 ) -- Create a safe zone by listening for players entering and leaving the zone local safeZoneCheckInterval = 0.2 local forceFieldName = \"PineapplesForLife\" local forceFieldTemplate = Instance . new ( \"ForceField\" ) forceFieldTemplate . Name = forceFieldName local connectionAdded = zone . playerAdded : Connect ( function ( player ) local char = player . Character local forceField = char and char : FindFirstChild ( forceFieldName ) if not forceField then forceField = forceFieldTemplate : Clone () forceField . Parent = char end end ) local connectionRemoving = zone . playerRemoving : Connect ( function ( player ) local char = player . Character local forceField = char and char : FindFirstChild ( forceFieldName ) if forceField then forceField : Destroy () end end ) zone : initLoop ( safeZoneCheckInterval ) Coin Spawner -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Setup zone local group = workspace . CoinSpawner local zone = ZoneService : createZone ( \"CoinSpawner\" , group , 15 ) -- Spawn coins within a random position in the zone, and position equal distances above the ground local distanceAboveGround = 4 local totalCoins = 40 local coinTemplate = Instance . new ( \"Part\" ) coinTemplate . Name = \"Coin\" coinTemplate . Anchored = true coinTemplate . CanCollide = false coinTemplate . Transparency = 0 coinTemplate . Size = Vector3 . new ( 1 , 4 , 4 ) coinTemplate . Color = Color3 . fromRGB ( 255 , 176 , 0 ) coinTemplate . Reflectance = 0.3 coinTemplate . Shape = Enum . PartType . Cylinder coinTemplate . Parent = nil local function spawnCoin () local randomCFrame , hitPart , hitIntersection = zone : getRandomPoint () local coin = coinTemplate : Clone () coin . CFrame = CFrame . new ( hitIntersection + Vector3 . new ( 0 , distanceAboveGround , 0 )) coin . Touched : Connect ( function () spawnCoin () coin : Destroy () end ) coin . Parent = workspace end for i = 1 , totalCoins do spawnCoin () end Voting Pads -- Get ZoneService local ZonePlus = require ( 4664437268 ) local ZoneService = require ( ZonePlus . ZoneService ) -- Config local voteTime = 10 -- Vote local votePads = workspace . VotingPads local voteMachine = workspace . VoteMachine9000 local container = voteMachine . SurfaceGui . Container local votes = container . Votes local status = container . Status local function beginVote () -- Setup voting zones local zones = {} for _ , group in pairs ( votePads : GetChildren ()) do local zoneName = group . Name local frame = votes [ zoneName ] local zone = ZoneService : createZone ( zoneName , group , 15 ) local function updateVote ( increment ) zone . votes = zone . votes + increment frame . TextLabel . Text = zone . votes end zone . votes = 0 zone . playerAdded : Connect ( function ( player ) updateVote ( 1 ) end ) zone . playerRemoving : Connect ( function ( player ) updateVote ( - 1 ) end ) zone : initLoop ( 0.1 ) updateVote ( 0 ) frame . Visible = true table.insert ( zones , zone ) end -- Countdown for i = 1 , voteTime do status . Text = ( \"Vote! (%s)\" ): format ( voteTime + 1 - i ) wait ( 1 ) end -- Determine winner local winners = {} local winningScore = 0 for _ , zone in pairs ( zones ) do local score = zone . votes if score > winningScore then winningScore = score end end for _ , zone in pairs ( zones ) do local score = zone . votes local frame = votes [ zone . name ] if score == winningScore then frame . Visible = true table.insert ( winners , zone ) else frame . Visible = false end ZoneService : removeZone ( zone . name ) end -- Display results if winningScore == 0 then status . Text = \"No votes were made.\" elseif # winners > 1 then status . Text = \"It's a tie!\" else status . Text = ( \"The winner is %s!\" ): format ( winners [ 1 ]. name ) end wait ( 3 ) -- Hide frames and restart status . Text = \"Beginning new round...\" for _ , frame in pairs ( votes : GetChildren ()) do frame . Visible = false end wait ( 1 ) end while true do beginVote () wait ( 1 ) end","title":"Uses"},{"location":"projects/zoneplus/zone/","text":"Properties \u00b6 autoUpdate \u00b6 Zone . autoUpdate desc. respectUpdateQueue \u00b6 Zone . respectUpdateQueue desc. group \u00b6 (read only) Zone . group desc. additionalHeight \u00b6 (read only) Zone . additionalHeight desc. Events \u00b6 playerAdded \u00b6 Zone . playerAdded desc. Zone . playerAdded : Connect ( function ( player )) end ) playerRemoving \u00b6 Zone . playerRemoving desc. Zone . playerRemoving : Connect ( function ( player )) end ) updated \u00b6 Zone . updated desc. Zone . updated : Connect ( function ()) end ) Methods \u00b6 update \u00b6 Icon : update () desc. displayBounds \u00b6 Icon : displayBounds () desc. getPlayersInRegion \u00b6 Icon : getPlayersInRegion () desc. getPlayer \u00b6 Icon : getPlayer () desc. getPlayers \u00b6 Icon : getPlayers () desc. initLoop \u00b6 Icon : initLoop () desc. endLoop \u00b6 Icon : endLoop () desc. getRandomPoint \u00b6 Icon : getRandomPoint () desc. destroy \u00b6 Icon : destroy () desc.","title":"Zone"},{"location":"projects/zoneplus/zone/#properties","text":"","title":"Properties"},{"location":"projects/zoneplus/zone/#autoupdate","text":"Zone . autoUpdate desc.","title":"autoUpdate"},{"location":"projects/zoneplus/zone/#respectupdatequeue","text":"Zone . respectUpdateQueue desc.","title":"respectUpdateQueue"},{"location":"projects/zoneplus/zone/#group","text":"(read only) Zone . group desc.","title":"group"},{"location":"projects/zoneplus/zone/#additionalheight","text":"(read only) Zone . additionalHeight desc.","title":"additionalHeight"},{"location":"projects/zoneplus/zone/#events","text":"","title":"Events"},{"location":"projects/zoneplus/zone/#playeradded","text":"Zone . playerAdded desc. Zone . playerAdded : Connect ( function ( player )) end )","title":"playerAdded"},{"location":"projects/zoneplus/zone/#playerremoving","text":"Zone . playerRemoving desc. Zone . playerRemoving : Connect ( function ( player )) end )","title":"playerRemoving"},{"location":"projects/zoneplus/zone/#updated","text":"Zone . updated desc. Zone . updated : Connect ( function ()) end )","title":"updated"},{"location":"projects/zoneplus/zone/#methods","text":"","title":"Methods"},{"location":"projects/zoneplus/zone/#update","text":"Icon : update () desc.","title":"update"},{"location":"projects/zoneplus/zone/#displaybounds","text":"Icon : displayBounds () desc.","title":"displayBounds"},{"location":"projects/zoneplus/zone/#getplayersinregion","text":"Icon : getPlayersInRegion () desc.","title":"getPlayersInRegion"},{"location":"projects/zoneplus/zone/#getplayer","text":"Icon : getPlayer () desc.","title":"getPlayer"},{"location":"projects/zoneplus/zone/#getplayers","text":"Icon : getPlayers () desc.","title":"getPlayers"},{"location":"projects/zoneplus/zone/#initloop","text":"Icon : initLoop () desc.","title":"initLoop"},{"location":"projects/zoneplus/zone/#endloop","text":"Icon : endLoop () desc.","title":"endLoop"},{"location":"projects/zoneplus/zone/#getrandompoint","text":"Icon : getRandomPoint () desc.","title":"getRandomPoint"},{"location":"projects/zoneplus/zone/#destroy","text":"Icon : destroy () desc.","title":"destroy"},{"location":"projects/zoneplus/zoneservice/","text":"API \u00b6 createZone \u00b6 ZoneService : createZone ( name , group , additionalHeight ) Creates, stores and returns a zone. getIcon \u00b6 ZoneService : getZone ( name ) Returns a zone of the corresponding name. getAllIcons \u00b6 ZoneService : getAllZones () Returns an array containing every zone. removeIcon \u00b6 ZoneService : removeZone ( name ) Destroys and removes references of the corresponding zone.","title":"ZoneService"},{"location":"projects/zoneplus/zoneservice/#api","text":"","title":"API"},{"location":"projects/zoneplus/zoneservice/#createzone","text":"ZoneService : createZone ( name , group , additionalHeight ) Creates, stores and returns a zone.","title":"createZone"},{"location":"projects/zoneplus/zoneservice/#geticon","text":"ZoneService : getZone ( name ) Returns a zone of the corresponding name.","title":"getIcon"},{"location":"projects/zoneplus/zoneservice/#getallicons","text":"ZoneService : getAllZones () Returns an array containing every zone.","title":"getAllIcons"},{"location":"projects/zoneplus/zoneservice/#removeicon","text":"ZoneService : removeZone ( name ) Destroys and removes references of the corresponding zone.","title":"removeIcon"}]}